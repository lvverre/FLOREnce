#lang racket 
(require syntax/parse)
(require "environment.rkt"
         "functional/datastructures.rkt")
(provide interpret-model interpret-body)



(define model-primitives (new-local-env (list (cons 'true #t)
                                              (cons 'false #f))))



                                       

(define (interpret-body stx env) 
  (syntax-parse stx
    [val:number
     (syntax-e #'val)]
    [val:string
     (syntax-e #'val)]
    [((~literal sym) val:id)
     (syntax-e #'val)]
    [val:id
     (lookup-var-error (syntax-e #'val) env)]
    [((~literal list) args ...)
     (map (lambda (arg) (interpret-body arg env)) (syntax->list #'(args ...)))]))


(define (interpret-model stx)
  (syntax-parse stx  
    [(((~literal def:) var:id body:expr )...)
     (let ((env (make-env model-primitives global-env)))
       (for-each (lambda (var body)
             
              (let ((val (model-var (syntax-e var)(interpret-body body env))))
                (add-to-local-env! (syntax-e var)
                                   val
                                   global-env)))
            (syntax->list #'(var ...))
            (syntax->list #'(body ...))))]))