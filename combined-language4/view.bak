#lang racket
(require syntax/parse)
(provide 
         interpret-view-widget
         (for-syntax def-view)
         (for-syntax def-window)
         (for-syntax def-widget))

(require (for-syntax syntax/parse))
(require "environment.rkt"
         racket/gui/base
         "GUI-primitives.rkt"
         "functional/datastructures.rkt"
         "primitives..rkt"
         "eval-rules-bodies.rkt"
         "compile-interpret.rkt"
         )

(define view-argument-primitive (make-hash  (list (cons '+ prim-add)
                                                  (cons '- prim-sub)
                                                  (cons '* prim-mul)
                                                  (cons '/ prim-div)
                                                  (cons 'equal? prim-equal?)
                                                  (cons '> prim-greater-then?)
                                                  (cons '< prim-smaller-then?)
                                                  (cons '<= prim-smaller-equal-then?)
                                                  (cons '>= prim-greater-equal-then?)
                                                  (cons 'not prim-not)
                                                  (cons 'and prim-and)
                                                  (cons 'true  #t)
                                                  (cons 'false #f)
                                                  (cons 'number->string prim-number->string)
                                                  (cons 'string->number prim-string->number)
                                                  (cons 'or prim-or))))
(define GUI-primitives (make-hash (list (cons 'gauge make-gauge)
                                       (cons  'slider make-slider)
                                       (cons  'button make-button)
                                       (cons  'radio-box make-radio-box)
                                       (cons  'check-box make-check-box)
                                       (cons  'message make-message)
                                       (cons  'slider make-slider)
                                       (cons 'list-box make-list-box)
                                       (cons 'text-field make-text-field)
                                       )))





(begin-for-syntax 
  (define-syntax-class def-widget
    (pattern ((~literal def:) var:id ... (op:id  args:body ...))
             #:attr variables #'(var ...)
             #:attr operator #'op
             #:attr arguments #'(list args.value ...)))

  
  
  (define-syntax-class def-window
    (pattern ((~literal def-window:) window-id:id defined-widgets:def-widget ...)
             #:attr id #'window-id
             #:attr variables #'(defined-widgets.variables ...)
             #:attr operators #'(defined-widgets.operator ...)
             #:attr arguments #'(list defined-widgets.arguments ...)))

  (define-syntax-class def-view
    (pattern ((~literal view:) windows:def-window ... widgets:def-widget ...)
             #:attr ids #'(main windows.id ...)
             #:attr variables #'((widgets.variables ...) windows.variables ...)
             #:attr operators #'((widgets.operator ...) windows.operators ...)
             #:attr arguments #'(list (list widgets.arguments ...) windows.arguments ...))))
                                 



              





(define (interpret-view-widget vars operator args parent env-name)
  (displayln args)
  (let ((results (apply (hash-ref GUI-primitives operator  (lambda ()(error (format "~a is not defined for this expression" operator))))
                        (cons parent (map (lambda (arg)
                                           
                                            (eval-reactor-body arg global-env))
                                          args)))))
    (when (not (= (length vars)
                  (length results)))
      (error "Number of given formal parameters is not equal to number of actual parameters given"))
    (for ([var vars]
          [res results])
      (add-to-local-env! var env-name res global-env))))
#|(define (interpret-view-widget stx parent)
  (syntax-parse stx
    [(op:id args ...)
     (apply (lookup-local-var-error (syntax-e #'op) GUI-primitives)
            (cons parent (map (lambda (arg)
                                (eval-reactor-body(compile-expression arg ) global-env))
                              (syntax->list #'(args ...)))))]))

(define (interpret-view stx)
  (syntax-parse stx
    [(((~literal def:) var:id ... body:expr) ...)
     (let* ((frame (new frame% [width 800] [height 800] [label "view"]))
            (parent (new class-panel [parent frame][style (list 'vscroll 'hscroll)])))
       (for-each (lambda (vars body)
                   (let ((evaluated-vals (interpret-view-widget body parent))
                         (evaluated-vars (map syntax-e (syntax->list vars))))
                     (when (not (= (length evaluated-vals)
                                   (length evaluated-vars)))
                       (error "Number of given formal parameters is not equal to number of actual parameters given"))
                     (for ([var evaluated-vars]
                           [val evaluated-vals])
                       (add-to-local-env! var val global-env))))
                 (syntax->list #'((var ...) ...))
                 (syntax->list #'(body ...)))
       (send frame show #t))
     ]))|#