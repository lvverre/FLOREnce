#lang racket

(provide (all-defined-out))




(define (local-env-contains? var name env)
  (hash-has-key? (hash-ref env name) var))

(define (node-env-contains? var env)
  (hash-has-key? env var))

(define (env-contains? var env)
  (let loop
    ((idx 0))
    (if (>= idx (vector-length env))
        #f
        
        (if (hash-has-key? (vector-ref env idx) var)
            #t
            (loop (+ idx 1))))))

 


(define make-env vector)
(define new-local-env make-hash)
(define new-node-env make-hash)
(define variable-id 0)
(define (increase-id)
  (set! variable-id (+ variable-id 1)))

(define get-local-env vector-ref)
(define get-node-env vector-ref)

(define (add-to-env! var val env)
  (if (hash-ref  (vector-ref env 0) var (lambda () #t))
      (hash-set! (vector-ref env 0) var val )
      (error (format "~a already defined" var))))


(define (add-to-local-env! var subenv-name val env)
  
  (let ((subenv (hash-ref env subenv-name (lambda () (error "Window does not exist")))))
   
    (if (hash-ref  subenv var (lambda () #t))
        (hash-set! subenv var val)
        (error (format "~a ~a already defined"subenv-name var))))) 
    

(define (add-to-node-env! var  val env)
  (if (hash-ref  env var (lambda () #t))
      (hash-set! env var val)
      (error (format "~a already defined" var)))
  )

(define (update-local-env! var subenv val env)
  (let ((sub-environemnt (hash-ref env subenv)))
    (if (local-env-contains? var subenv env)
        (hash-set! sub-environemnt var val)
        (error (format "Cannot update undefined variable ~a" var)))))

(define (update-node-env! var  val env)

    (if (node-env-contains? var env)
        (hash-set! env var val)
        (error (format "Cannot update undefined variable ~a" var))))

(define (update-env! var val env)
  (let loop
    ((idx 0))
    (if (>= idx (vector-length env))
       (error (format "Cannot update undefined variable ~a" var))
        (let ((local-env (vector-ref env idx)))
          (if (hash-has-key? local-env var)
              (hash-set! local-env var val)
              (loop (+ idx 1)))))))
        


(define (lookup-var var env failure)
  (let loop
    ((idx 0))
    (if (>= idx (vector-length env))
        (failure)
        (let ((local-env (vector-ref env idx)))
          (if (hash-has-key? local-env var)
              (hash-ref local-env var)
              (loop (+ idx 1)))))))
     

(define (lookup-local-var-error var env-name local-env)
 
  (hash-ref (hash-ref local-env env-name) var (lambda ()(error (format "~a is not defined for this expression L" var)))))

(define (lookup-local-var-false var env-name local-env) 
  (hash-ref (hash-ref local-env env-name) var (lambda ()#f)))

(define (lookup-all-local-var-error var  local-env)
  (let loop
    ((envs (hash-values local-env)))
   
    (if (null? envs)
        (error (format "~a is not defined for this expression" var))
        (hash-ref (car envs) var (lambda () (loop (cdr envs)))))))
    
 

(define (lookup-node-var-error var  local-env) 
  (hash-ref local-env var (lambda ()(error (format "~a is not defined for this expression" var)))))

(define (get-sub-env env name)
  (hash-ref env name))


(define (lookup-var-false var env)
  (lookup-var var env (lambda () #f)))
(define (lookup-var-error var env)
  (lookup-var var env (lambda ()
                        
                        (error (format "~a is not defined for this expression hier" var)))))


(define global-env (new-local-env))

(define (create-new-subenv! env name)
  (hash-set! env name (new-local-env)))

 