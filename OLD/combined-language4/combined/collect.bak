#lang racket


(require 
         "../functional/deploy.rkt"
         "../functional/datastructures.rkt"
        
         "../logical/tokens.rkt"
         "../environment.rkt"
         )
        
(provide (all-defined-out))
(require (for-syntax syntax/parse))

(define (init-fact-collector! collector collection-size fact-collector-size fact-name)
  (set-fact-collector-fact-name! collector fact-name)
  (set-fact-collector-tail! collector fact-collector-size)
  (set-fact-collector-storage! collector
                               (build-vector (+ fact-collector-size 1)
                                    (lambda (n)
                                      (make-vector collection-size 'empty)))))
                      









                   
            
                      
        
(define (calculate-collection-size logic-connectors)
  (if (deployedR? (car logic-connectors))
      (vector-length (deployedR-outs (car logic-connectors)))
      (length logic-connectors)))
 




(define (contains-collector? collector logic-connector)
  (let loop
    ((connectors (functional-node-connectors logic-connector)))
    (cond ((null? connectors) #f)
          ((eq? (functional-connector-app-info (car connectors))
                collector)
           (car connectors))
          (else (loop (cdr connectors))))))


(define (register-deployedR-to-collector! logic-connector collector)
    
  (set-functional-node-connectors! logic-connector
                                      (cons (func->logic-connector 0 collector)
                                            (functional-node-connectors logic-connector))))




(define (register-events-to-collector! logic-connectors collector)
    (for/fold
        ([idx 0])
        ([logic-connector logic-connectors])
      (let ((existing-connector (contains-collector? collector logic-connector)))
        (cond ((and existing-connector
                    (functional-connector? existing-connector))
               (set-functional-connector-input-info! existing-connector
                                            (cons idx
                                                  (functional-connector-input-info existing-connector))))
              (else
               
               (let ((new-connector (func->logic-connector (list idx) collector)))
                 (set-functional-node-connectors! logic-connector
                                                  (cons new-connector
                                                        (functional-node-connectors logic-connector)))
                )))
        (+ idx 1))))
         

(define (check-argument-type logic-connectors fact-name)
  (if   (and
         (not (null? logic-connectors))
         (not (or (for/and ([logic-connector logic-connectors])
                   (event-node? logic-connector))
                 (and (null? (cdr logic-connectors))
                      (deployedR? (car logic-connectors))))))
        (error (format "Wrong type argument for collect* expected events or 1 deployed reactor given ~a"
                       logic-connectors))
        (when (not (symbol? fact-name))
            (error (format (error "Wrong type argument for collect* expected symbol given ~a" fact-name))))))
        
  
(define (collect* logic-connector-names logic-connector-places fact-name size collector )
  (displayln "collect")
      (let* (
             (logic-connectors (map (lambda (var place)
                                     
                                         
                                          (lookup-local-var-error var place global-env))
                                    logic-connector-names
                                    logic-connector-places)))
        (check-argument-type logic-connectors fact-name)
        (let ((collection-size (calculate-collection-size logic-connectors)))
         
          (init-fact-collector! collector collection-size size fact-name)
          (if (deployedR? (car logic-connectors))
              (register-deployedR-to-collector! (car logic-connectors) collector)
              (register-events-to-collector! logic-connectors collector)))))
          


(begin-for-syntax 
  (define-syntax-class input
    (pattern ((~literal factt:) window:id input:id)
             #:attr place #''window
              #:attr var #''input)
    
    (pattern input:id
             #:attr place  #''unknown
             #:attr var #''input))

  (define-syntax-class first-input
    (pattern ((~literal factt:) window:id input:id)
             #:attr place #''window
              #:attr var #''input)
    
    (pattern input:id
             #:attr place  #''react
             #:attr var #''input))) 

(define (add-collect* logic-connector-names logic-connector-places fact-name time-interval size )

  (if (number? time-interval)
      (collect* logic-connector-names
                logic-connector-places
                fact-name
                size
                (add-fact-collector 0 -1 -1 -1 time-interval)
                )
      (error (format "Wrong type argument for add-collect* expected number given ~a" time-interval))))

(define (remove-collect*  logic-connector-names
                logic-connector-places   fact-name size )
  (collect*  logic-connector-names
                logic-connector-places fact-name
            size (remove-fact-collector 0 -1 -1 -1 )
            ))
    


(define-syntax (add-collect1: stx)
  (syntax-parse stx
    [((~literal add-collect1:) first-logic-connector:first-input logic-connector-identifiers:input ... (~literal as:) fact-name:id (~literal for:) time-interval:number)
     #'(add-collect* (list first-logic-connector.var logic-connector-identifiers.var ...) (list first-logic-connector.place logic-connector-identifiers.place ...) 'fact-name time-interval  1 )]))

(define-syntax (add-collect2: stx)
  (syntax-parse stx
    [((~literal add-collect2:) first-logic-connector:first-input  logic-connector-identifiers:input ... (~literal as:) fact-name:id (~literal for:) time-interval:number)
     #'(add-collect*  (list first-logic-connector.var  logic-connector-identifiers.var ...) (list first-logic-connector.place logic-connector-identifiers.place ...) 'fact-name time-interval  2 )]))

(define-syntax (add-collect3: stx)
  (syntax-parse stx
    [((~literal add-collect3:) first-logic-connector:first-input logic-connector-identifiers:input ... (~literal as:) fact-name:id (~literal for:) time-interval:number)
     #'(add-collect*  (list first-logic-connector.var  logic-connector-identifiers.var ...) (list first-logic-connector.place logic-connector-identifiers.place ...) 'fact-name time-interval  3 )]))
(define-syntax (add-collect4: stx)
  (syntax-parse stx
    [((~literal add-collect4:) first-logic-connector:first-input logic-connector-identifiers:input ... (~literal as:) fact-name:id (~literal for:) time-interval:number)
     #'(add-collect*  (list first-logic-connector.var logic-connector-identifiers.var ...) (list first-logic-connector.place logic-connector-identifiers.place ...)'fact-name time-interval  4 )]))



(define-syntax (remove-collect1: stx)
  (syntax-parse stx
    [((~literal remove-collect1:) first-logic-connector:first-input logic-connector-identifiers:input ... (~literal as:) fact-name:id )
     #'(remove-collect*  (list first-logic-connector.var logic-connector-identifiers.var ...) (list first-logic-connector.place logic-connector-identifiers.place ...)'fact-name 1)]))

(define-syntax (remove-collect2: stx)
  (syntax-parse stx
    [((~literal remove-collect2:) first-logic-connector:first-input logic-connector-identifiers:input ... (~literal as:) fact-name:id )
     #'(remove-collect*  (list first-logic-connector.var logic-connector-identifiers.var ...) (list first-logic-connector.place logic-connector-identifiers.place ...) 'fact-name 2)]))

(define-syntax (remove-collect3: stx)
  (syntax-parse stx
    [((~literal remove-collect3:) first-logic-connector:first-input logic-connector-identifiers:input ... (~literal as:) fact-name:id )
     #'(remove-collect*  (list first-logic-connector.var logic-connector-identifiers.var ...) (list first-logic-connector.place logic-connector-identifiers.place ...) 'fact-name 3)]))

(define-syntax (remove-collect4: stx)
  (syntax-parse stx
    [((~literal remove-collect1:) first-logic-connector:first-input logic-connector-identifiers:input ... (~literal as:) fact-name:id )
     #'(remove-collect*  (list first-logic-connector.var logic-connector-identifiers.var ...) (list first-logic-connector.place logic-connector-identifiers.place ...) 'fact-name 4)]))