#lang racket

(require "../environment.rkt"
         "../functional/datastructures.rkt"
         "../compile-interpret.rkt"
         (except-in "../logical/nodes.rkt" root)
         "../logical/logical-variables.rkt" 
         "../functional/reactor.rkt"
         "../eval-rules-bodies.rkt"
        
         )
(require (for-syntax syntax/parse))
(provide (all-defined-out))
(struct logic-connector (deployedR-add deployedR-remove) #:transparent) 

(define (lookup-model-var name)
  (let ((value (lookup-local-var-error name 'model global-env)))
    (when (not (model-var? value))
      (error (format "Forall needs to have model vars")))
    value))

(define-syntax (forall: stx)
  (syntax-parse stx
    [((~literal forall:) (event-name:id (args ...) constraints ...)
                         ((~literal add-deploy:) reactor-name-add:id model-vars-add:id ... (~literal as:) deployedR-add-name:id)
                         ((~literal remove-deploy:) reactor-name-remove:id model-vars-remove:id ... (~literal as:) deployedR-remove-name:id))
     
     #'(begin 
    
                               
    (let*
        (
         
         (alpha-node (make-alpha-node 'event-name '(args ...) (compile-constraint-rules-without-syntax '(constraints ...))));(compile-multiple-in-one '(constraints ...) )))
         ;(map (lambda (condition) (compile condition #t)) '(constraints ...))))
        (reactor-add (lookup-local-var-error 'reactor-name-add global-env))
        (reactor-remove (lookup-local-var-error 'reactor-name-remove global-env))
        (model-vals-add (make-immutable-hash (map (lambda (var)
                                                    (cons var (lookup-model-var var))) '(model-vars-add ...))))
        (model-vals-remove (make-immutable-hash (map (lambda (var)
                                                       (cons var (lookup-model-var var)))'(model-vars-remove ...))))
                               
                            
         )
     
      (for-each (lambda (reactor reactor-name )
                 
                  (when (not (reactor? reactor))
                    (error (format "~a needs to be an reactor, but is ~a"
                                   reactor-name
                                   reactor))))
                 (list reactor-add reactor-remove)
                '(reactor-name-add reactor-name-remove)
               )
      (let* ((deployedR-add (deployedR
                             '()
                             (reactor-ins reactor-add)
                             (reactor-dag reactor-add)
                             (reactor-outs reactor-add)
                             model-vals-add))
             (deployedR-remove (deployedR
                                '()
                                (reactor-ins reactor-remove)
                                (reactor-dag reactor-remove)
                                (reactor-outs reactor-remove)
                                model-vals-remove))
             (logic-connector (logic-connector deployedR-add deployedR-remove)))
        (add-to-local-env! 'deployedR-add-name deployedR-add global-env)
        (add-to-local-env! 'deployedR-remove-name deployedR-remove global-env)
        (set-filter-node-successor! alpha-node logic-connector)
        (register-to-root! alpha-node root))))]))