#lang racket
 (require racket/gui/base)

(struct in ())
(struct out ())
;(struct in-out ())
(struct change-label out (message))


(define class-panel (class panel%
                       (super-new )
                      (define/override (place-children info width height)
                        (map (lambda (child info-child )
                               (list (send child get-x)
                                     (send child get-y)
                                     (send child min-width)
                                     (send child min-height)
                                     ))
                             (send this get-children)
                             info))
                     (define/override (container-size info)
                       (values (send this min-width)
                               (send this min-height)))))



(define class-button (class button%
                       (init co-x co-y)
                       (define x co-x)
                       (define y co-y) 
                       (define/override (get-x)
                         x)
                       (define/override (get-y)
                         y)
                       (super-new )))
(define class-message (class message%
                       (init co-x co-y)
                       (define x co-x)
                       (define y co-y) 
                       (define/override (get-x)
                         x)
                       (define/override (get-y)
                         y)
                       (super-new )))

(define (make-button parent x y min-width min-height label)
  (cond ((and (number? x)
              (number? y)
              (number? min-width)
              (number? min-height)
              (string? label))
         (let* ((event 
                (button (new button-class [co-x x]
                             [co-y y] [min-width min-width]
                             [min-height min-height] [parent parent]
                             [callback (lambda (button control-event)
                                         
                                       
               


(define (make-message parent x y min-width min-height label )
  (cond ((and (number? x)
              (number? y)
              (number? min-width)
              (number? min-height)
              (string? label))
         (let ((message (new class-message [co-x x]
                             [co-y y] [min-width min-width]
                             [min-height min-height] [parent parent])))
           (change-label message)))
        (else (error (format "Wrong type of argument for make-message")))))
      
  
(require racket/trait)
