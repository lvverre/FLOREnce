#lang racket
(struct pn-pair (priority node) #:mutable)
(struct vn-pair (val node turn))
(struct logic-vn-pair (val node turn))
(struct func-vn-pair (val node turn))
(define priority-queue (make-heap (lambda (pn-pair-1 pn-pair-2)
                                    (equal? (pn-pair-node pn-pair-1)
                                            (pn-pair-node pn-pair-2)))))
(define current-priority 0)
(define (make-current-priority node value)
  (pn-pair node value))
(define (propagate!)
  (for ([priority-node (in-heap/consume! priority-queue) ])
    (match (pn-pair-val priority-node)
      [(logic-vn-pair token node turn)
       ]
      [(func-vn-pair ins node turn)])))
      
  
  