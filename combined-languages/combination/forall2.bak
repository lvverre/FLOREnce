#lang racket
(require "../functional/environment.rkt"
         "../functional/deployment.rkt")
(struct forall-node (for-add for-remove) #:transparent) 
(struct functional-multi-event (deployedR) #:transparent)
 

(defmac (forall: (event-name (args ...) constraints ...)
                 (add-deploy: reactor-name-add as: deployR-add-name)
                 (remove-deploy: reactor-name-remove as: deployR-remove-name))
  #:keywords forall: on-add: on-remove:
  #:captures root timer root-lock functional-environment
  (for-each (lambda (name)
              (when (not (symbol? name))
                (error (format "Forall expects symbol gotten ~a" name))))
            '(reactor-name-add deployR-add-name reactor-name-remove deployR-remove-name))
                               
  (let* ((alpha-node (make-alpha-node 'event-name '(args ...) (map (lambda (condition) (compile condition #t)) '(constraints ...))))
         (reactor-add (lookup-var 'reactor-name-add functional-environment))
         (reactor-remove (lookup-ar 'reactor-name-remove functional-environment)))
    (for-each (lambda (reactor reactor-name deployedR-name)
                (when (not (reactor? reactor))
                  (error (format "~a needs to be an reactor, but is ~a"
                                 reactor-name
                                 reactor)))
                (set-alpha-node
                )
              (list reactor-add reactor-remove)
              '(reactor-name-add reactor-name-remove)
              '(deployR-add-name deployR-remove-name))
    (set-alpha-node-successors! alpha-node
                                (list 