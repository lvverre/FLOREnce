#lang racket

(struct nmbr (value))
(struct str (value))
(struct pair (head tail))


(define view-env-prims (new-env))


(define (eval-view exprs env native-env)
  (define (eval-view-right-expr expr)
    (match expr
      [`(,op ,args ...)
       ...]
      [_ (error (format "Right expression in def: in view: needs to be of the form (op args ..) given ~a" expr))]))
  (define (eval-view-define expr)
    (match expr
      [`(def: ,var ,right-expr)
       (let ((evalutet-right (eval-view-right-expr right-expr)))
         (add-to-env! var evaluated-right env))]
      [_ (error (format "Expression in body of view needs to be of the form (def: var expr) given ~a" expr))]))