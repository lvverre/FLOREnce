#lang racket

(struct logic-connector (deployedLs) #:mutable)
(struct deployedR logic-connector (ins dag outs))
(define (execute-turn deployedr input)
  (define ins (deployedR-ins deployedr))
  (define nodes (deployedR-dag deployedr))
  (define outs (deployedR-outs deployedr))
  (define values (make-vector (vector-length nodes) 'undefined))
  (if (not (= (vector-length ins) (vector-length input)))
      (error (format "Wrong number of inputs expected ~a given ~a"
                     (vector-length ins)
                     (vector-length input)))
      (for ([idx ins]
            [value input])
        (vector-set! values idx value)))
  ;(display values)
  (functional-propagate  nodes values (vector-length ins))
  (for/vector ([idx outs])
    (vector-ref values idx)))


(struct deploy-info (input-idxs deployedR) #:mutable #:transparent)
(define (register-to-event! event new-deployedR input-idx)
    (let deployment-comparisson-loop
      ((deployments (deployE-deployments event)))
      (cond ((null? deployments)
             (set-deployE-deployments! event
                                     (cons (deploy-info (list input-idx)
                                                        new-deployedR)
                                           (deployE-deployments event))))
            ((eq? (deploy-info-deployedR (car deployments))
                  new-deployedR)
             (displayln "equal")
             (displayln input-idx)
             (set-deploy-info-input-idxs! (car deployments)
                                          (cons input-idx
                                                (deploy-info-input-idxs (car deployments)))))
            (else
             (deployment-comparisson-loop (cdr deployments))))))
             

(defmac (deploy: reactor-name
         with: event-names ...
         as: new-name)
  #:keywords deploy: with: as:
  (let* ((reactor (lookup-var 'reactor-name reactor-env))
        (events (map (lambda (name)
                       (let ((event (lookup-var name deploy-env)))
                         (if (deployE? event)
                             event
                             (error (format "Deploy:with:as: needs event as argument gotten ~a" event)))))
                     '(event-names ...)))
        (deployed-reactor     (deployedR (reactor-ins reactor)
                                         (reactor-dag reactor)
                                         (reactor-outs reactor)
                                         '())))
    (if (= (vector-length (reactor-ins reactor))
           (length events))
        (for/fold ([idx 0])
                  ([event events])
              
          (displayln idx)
          (register-to-event! event deployed-reactor idx)
          (+ idx 1))
        (error (format "Reactor needs ~a events given ~a"
                       (vector-length (reacotr-ins reactor))
                       (length events))))))
        
    
                