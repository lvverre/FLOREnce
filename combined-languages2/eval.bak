#lang racket
(require "functional/environment.rkt"
         "parse-values.rkt")
(define (eval local-env global-env native-env exprs)
  (define (already-defined? var)
    (or (env-contains? var native-env)
        (env-contains? var local-env)))
  (define (loop expr)
    (displayln expr)
    (match expr
      [(def var right-expr)
       (cond ((already-defined? (var-exp-val var))
              (error (format "Variable already defined ~a" (var-exp-val var))))
             (else 
              (let ((val-right-expr (loop right-expr)))
                (add-to-env! (var-exp-val var) val-right-expr local-env))))]
      [(app op args)
       (let ((val-op (loop op))
             (val-args (map loop args)))
         (apply val-op val-args))]
      [(pair first rest)
       (pair (loop first)
             (loop rest))]
      [(if-exp pred then-branch else-branch)
       (let ((result-pred (eval pred)))
         (if (eq? true result-pred)
             (eval then-branch)
             (eval else-branch)))]
      [(var-exp val)
       (displayln val)
       (displayln expr)
       (let ((try-local (lookup-var-false val local-env)))
         (if try-local
             try-local
             (let ((try-native (lookup-var-false val native-env)))
               (if try-native
                   try-native
                   (let ((try-global (lookup-var-false val global-env)))
                     (if try-global
                         try-global
                         (error (format "~a is not defined" val))))))))]
      [_ expr]))
  (for-each loop exprs))